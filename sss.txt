\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)\nCell \u001b[0;32mIn[218], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m diz_loss \u001b[39m=\u001b[39m {\u001b[39m'\u001b[39m\u001b[39mtrain_loss\u001b[39m\u001b[39m'\u001b[39m:[],\u001b[39m'\u001b[39m\u001b[39mval_loss\u001b[39m\u001b[39m'\u001b[39m:[]}\n\u001b[1;32m      2\u001b[0m \u001b[39mfor\u001b[39;00m epoch \u001b[39min\u001b[39;00m \u001b[39mrange\u001b[39m(num_epochs):\n\u001b[0;32m----> 3\u001b[0m    train_loss \u001b[39m=\u001b[39mtrain_epoch(model,device,train_dataloader,loss,optim,scheduler)\n\u001b[1;32m      4\u001b[0m    val_loss \u001b[39m=\u001b[39m test_epoch(model,device,val_dataloader,loss)\n\u001b[1;32m      5\u001b[0m    \u001b[39mprint\u001b[39m(\u001b[39m'\u001b[39m\u001b[39m\\n\u001b[39;00m\u001b[39m EPOCH \u001b[39m\u001b[39m{}\u001b[39;00m\u001b[39m/\u001b[39m\u001b[39m{}\u001b[39;00m\u001b[39m \u001b[39m\u001b[39m\\t\u001b[39;00m\u001b[39m train loss \u001b[39m\u001b[39m{}\u001b[39;00m\u001b[39m \u001b[39m\u001b[39m\\t\u001b[39;00m\u001b[39m val loss \u001b[39m\u001b[39m{}\u001b[39;00m\u001b[39m'\u001b[39m\u001b[39m.\u001b[39mformat(epoch \u001b[39m+\u001b[39m \u001b[39m1\u001b[39m, num_epochs,train_loss,val_loss))\n\nCell \u001b[0;32mIn[215], line 8\u001b[0m, in \u001b[0;36mtrain_epoch\u001b[0;34m(model, device, dataloader, loss_fn, optimizer, scheduler)\u001b[0m\n\u001b[1;32m      6\u001b[0m image_batch \u001b[39m=\u001b[39m image_batch\u001b[39m.\u001b[39mto(device)\n\u001b[1;32m      7\u001b[0m decoded_data \u001b[39m=\u001b[39m model(image_batch)\n\u001b[0;32m----> 8\u001b[0m loss \u001b[39m=\u001b[39m loss_fn(decoded_data, image_batch)\n\u001b[1;32m      9\u001b[0m optimizer\u001b[39m.\u001b[39mzero_grad()\n\u001b[1;32m     10\u001b[0m loss\u001b[39m.\u001b[39mbackward()\n\nFile \u001b[0;32m~/Desktop/AnomalyDetection/ad-venv/lib/python3.9/site-packages/torch/nn/modules/module.py:1488\u001b[0m, in \u001b[0;36mModule._call_impl\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1483\u001b[0m \u001b[39m# If we don't have any hooks, we want to skip the rest of the logic in\u001b[39;00m\n\u001b[1;32m   1484\u001b[0m \u001b[39m# this function, and just call forward.\u001b[39;00m\n\u001b[1;32m   1485\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mnot\u001b[39;00m (\u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_backward_pre_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_hooks \u001b[39mor\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_forward_pre_hooks\n\u001b[1;32m   1486\u001b[0m         \u001b[39mor\u001b[39;00m _global_backward_pre_hooks \u001b[39mor\u001b[39;00m _global_backward_hooks\n\u001b[1;32m   1487\u001b[0m         \u001b[39mor\u001b[39;00m _global_forward_hooks \u001b[39mor\u001b[39;00m _global_forward_pre_hooks):\n\u001b[0;32m-> 1488\u001b[0m     \u001b[39mreturn\u001b[39;00m forward_call(\u001b[39m*\u001b[39;49margs, \u001b[39m*\u001b[39;49m\u001b[39m*\u001b[39;49mkwargs)\n\u001b[1;32m   1489\u001b[0m \u001b[39m# Do not call functions when jit is used\u001b[39;00m\n\u001b[1;32m   1490\u001b[0m full_backward_hooks, non_full_backward_hooks \u001b[39m=\u001b[39m [], []\n\nCell \u001b[0;32mIn[214], line 6\u001b[0m, in \u001b[0;36mSSIMLoss.forward\u001b[0;34m(self, x, y)\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mforward\u001b[39m(\u001b[39mself\u001b[39m, x, y):\n\u001b[0;32m----> 6\u001b[0m     \u001b[39mreturn\u001b[39;00m \u001b[39m1.\u001b[39m \u001b[39m-\u001b[39m \u001b[39msuper\u001b[39;49m()\u001b[39m.\u001b[39;49mforward(x, y)\n\nFile \u001b[0;32m~/Desktop/AnomalyDetection/ad-venv/lib/python3.9/site-packages/piqa/ssim.py:244\u001b[0m, in \u001b[0;36mSSIM.forward\u001b[0;34m(self, input, target)\u001b[0m\n\u001b[1;32m    243\u001b[0m \u001b[39mdef\u001b[39;00m \u001b[39mforward\u001b[39m(\u001b[39mself\u001b[39m, \u001b[39minput\u001b[39m: Tensor, target: Tensor) \u001b[39m-\u001b[39m\u001b[39m>\u001b[39m Tensor:\n\u001b[0;32m--> 244\u001b[0m     assert_type(\n\u001b[1;32m    245\u001b[0m         \u001b[39minput\u001b[39;49m, target,\n\u001b[1;32m    246\u001b[0m         device\u001b[39m=\u001b[39;49m\u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mkernel\u001b[39m.\u001b[39;49mdevice,\n\u001b[1;32m    247\u001b[0m         dim_range\u001b[39m=\u001b[39;49m(\u001b[39m3\u001b[39;49m, \u001b[39m5\u001b[39;49m),\n\u001b[1;32m    248\u001b[0m         n_channels\u001b[39m=\u001b[39;49m\u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mkernel\u001b[39m.\u001b[39;49msize(\u001b[39m0\u001b[39;49m),\n\u001b[1;32m    249\u001b[0m         value_range\u001b[39m=\u001b[39;49m(\u001b[39m0.\u001b[39;49m, \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mvalue_range),\n\u001b[1;32m    250\u001b[0m     )\n\u001b[1;32m    252\u001b[0m     l \u001b[39m=\u001b[39m ssim(\u001b[39minput\u001b[39m, target, kernel\u001b[39m=\u001b[39m\u001b[39mself\u001b[39m\u001b[39m.\u001b[39mkernel, \u001b[39m*\u001b[39m\u001b[39m*\u001b[39m\u001b[39mself\u001b[39m\u001b[39m.\u001b[39mkwargs)[\u001b[39m0\u001b[39m]\n\u001b[1;32m    254\u001b[0m     \u001b[39mreturn\u001b[39;00m reduce_tensor(l, \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mreduction)\n\nFile \u001b[0;32m~/Desktop/AnomalyDetection/ad-venv/lib/python3.9/site-packages/piqa/utils/__init__.py:98\u001b[0m, in \u001b[0;36massert_type\u001b[0;34m(device, dim_range, n_channels, value_range, *tensors)\u001b[0m\n\u001b[1;32m     96\u001b[0m \u001b[39mif\u001b[39;00m value_range \u001b[39mis\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39mNone\u001b[39;00m:\n\u001b[1;32m     97\u001b[0m     \u001b[39massert\u001b[39;00m value_range[\u001b[39m0\u001b[39m] \u001b[39m<\u001b[39m\u001b[39m=\u001b[39m t\u001b[39m.\u001b[39mmin(), \u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mExpected all values to be greater or equal to \u001b[39m\u001b[39m{\u001b[39;00mvalue_range[\u001b[39m0\u001b[39m]\u001b[39m}\u001b[39;00m\u001b[39m, but got \u001b[39m\u001b[39m{\u001b[39;00mt\u001b[39m.\u001b[39mmin()\u001b[39m.\u001b[39mitem()\u001b[39m}\u001b[39;00m\u001b[39m.\u001b[39m\u001b[39m\"\u001b[39m\n\u001b[0;32m---> 98\u001b[0m     \u001b[39massert\u001b[39;00m t\u001b[39m.\u001b[39mmax() \u001b[39m<\u001b[39m\u001b[39m=\u001b[39m value_range[\u001b[39m1\u001b[39m], \u001b[39mf\u001b[39m\u001b[39m\"\u001b[39m\u001b[39mExpected all values to be lower or equal to \u001b[39m\u001b[39m{\u001b[39;00mvalue_range[\u001b[39m1\u001b[39m]\u001b[39m}\u001b[39;00m\u001b[39m, but got \u001b[39m\u001b[39m{\u001b[39;00mt\u001b[39m.\u001b[39mmax()\u001b[39m.\u001b[39mitem()\u001b[39m}\u001b[39;00m\u001b[39m.\u001b[39m\u001b[39m\"\u001b[39m\n\n\u001b[0;31mAssertionError\u001b[0m: Expected all values to be lower or equal to 1.0, but got 2.9178342819213867.